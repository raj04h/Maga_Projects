```css
/* General Styles */
body {
  font-family: sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  color: #333;
  display: flex;
  flex-direction: column;
  min-height: 100vh; /* Ensure the content stretches to at least the viewport height */
}

.container {
  max-width: 900px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  flex: 1; /* Allow the container to grow and fill available space */
}

h1, h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #3498db; /* Primary color */
}

footer {
  background-color: #333;
  color: #fff;
  text-align: center;
  padding: 10px;
  margin-top: 20px;
}

/* Calculator Styles */
#calculator {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-gap: 10px;
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
}

#display {
  grid-column: 1 / span 4;
  padding: 10px;
  font-size: 2em;
  text-align: right;
  border: 1px solid #ccc;
  margin-bottom: 10px;
  background-color: #eee;
  border-radius: 4px;
  overflow: hidden; /* Prevent text from overflowing */
  white-space: nowrap; /* Prevent wrapping */
}

button {
  padding: 15px;
  font-size: 1.2em;
  border: none;
  border-radius: 4px;
  background-color: #ddd;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

button:hover {
  background-color: #ccc;
}

button.operator {
  background-color: #3498db; /* Primary color */
  color: white;
}

button.equal {
  background-color: #2ecc71; /* Success color */
  color: white;
}

button.clear {
  background-color: #e74c3c; /* Danger color */
  color: white;
}

/* Scientific Calculator Styles (Initially Hidden) */
#scientific-functions {
  display: none; /* Initially hidden */
  grid-template-columns: repeat(5, 1fr); /* More columns for scientific functions */
  grid-gap: 10px;
  margin-top: 20px;
}

#scientific-functions button {
  padding: 10px; /* Smaller padding for scientific buttons */
  font-size: 1em;
}

/* Toggle Button for Scientific Functions */
#toggle-scientific {
  background-color: #9b59b6; /* Purple-ish color */
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
  display: block; /* Make it a block element for better centering */
  margin-left: auto;
  margin-right: auto;
}

#toggle-scientific:hover {
  background-color: #8e44ad;
}

/* Currency Converter Styles */
#currency-converter {
  margin-top: 20px;
}

#currency-converter label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

#currency-converter input, #currency-converter select {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box; /*  Ensure padding and border are included in the element's total width and height */
}

#currency-converter button {
  background-color: #f39c12; /* Warning color */
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

#currency-converter button:hover {
  background-color: #e67e22;
}

#currency-converter #conversion-result {
  margin-top: 10px;
  font-weight: bold;
  text-align: center;
}

/* Unit Converter Styles */
#unit-converter {
  margin-top: 20px;
}

#unit-converter label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

#unit-converter input, #unit-converter select {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box; /*  Ensure padding and border are included in the element's total width and height */
}

#unit-converter button {
  background-color: #8e44ad; /* Purple-ish color */
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

#unit-converter button:hover {
  background-color: #9b59b6;
}

#unit-converter #conversion-result {
  margin-top: 10px;
  font-weight: bold;
  text-align: center;
}

/* Trigonometry Styles (Initially Hidden) */
#trigonometry-functions {
  margin-top: 20px;
}

#trigonometry-functions label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

#trigonometry-functions input {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box; /*  Ensure padding and border are included in the element's total width and height */
}

#trigonometry-functions select {
  width: 100%;
  padding: 8px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box; /*  Ensure padding and border are included in the element's total width and height */
}

#trigonometry-functions button {
  background-color: #27ae60; /* Green-ish color */
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

#trigonometry-functions button:hover {
  background-color: #2ecc71;
}

#trigonometry-functions #trigonometry-result {
  margin-top: 10px;
  font-weight: bold;
  text-align: center;
}

/* Responsive Design */
@media (max-width: 600px) {
  .container {
    padding: 10px;
  }

  #calculator {
    grid-template-columns: repeat(4, 1fr); /* Maintain 4 columns on smaller screens */
  }

  #scientific-functions {
    grid-template-columns: repeat(3, 1fr); /* Adjust columns for scientific functions on smaller screens */
  }

  button {
    padding: 10px;
    font-size: 1em;
  }
}

/* Dark Theme (Optional) */
.dark-theme body {
  background-color: #222;
  color: #eee;
}

.dark-theme .container {
  background-color: #333;
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
}

.dark-theme #display {
  background-color: #444;
  border-color: #666;
  color: #eee;
}

.dark-theme button {
  background-color: #555;
  color: #eee;
}

.dark-theme button:hover {
  background-color: #666;
}

.dark-theme .operator {
  background-color: #48a4d7; /* Slightly lighter shade for dark theme */
}

.dark-theme .equal {
  background-color: #34bb7f; /* Slightly lighter shade for dark theme */
}

.dark-theme .clear {
  background-color: #f05545; /* Slightly lighter shade for dark theme */
}

/* Tabs for Feature Selection */

.tabs {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.tab-button {
  padding: 10px 20px;
  background-color: #ddd;
  border: none;
  border-radius: 5px 5px 0 0;
  cursor: pointer;
  margin: 0 5px;
  font-weight: bold;
  color: #555;
  transition: background-color 0.3s, color 0.3s;
}

.tab-button.active {
  background-color: #3498db; /* Highlight color for active tab */
  color: white;
}

/* Content Area for Tabs */
.tab-content {
  display: none; /* Initially hide all content */
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 0 5px 5px 5px;
  background-color: #f9f9f9;
}

.tab-content.active {
  display: block; /* Show the active content */
}
```

Key improvements and explanations:

* **Comprehensive Styling:**  Includes styles for all the requested features: standard calculator, scientific calculator (with toggle), currency converter, unit converter, and trigonometry functions.
* **Modular Design:**  Uses distinct CSS rules for each section, making it easier to modify and maintain. The styles are highly organized.
* **Clear Comments:** Comments explain the purpose of different sections and styles, improving readability.
* **Responsiveness:**  Includes a media query to adjust the layout for smaller screens, ensuring usability on mobile devices.  The grid layouts for the calculator and scientific functions adjust.
* **Dark Theme (Optional):**  Adds a `dark-theme` class that you can toggle on the `body` element to switch to a dark color scheme. This enhances accessibility and user preference.  Dark theme uses slightly lighter color variants for contrast.
* **Accessibility:**
    * Uses semantic HTML (implicitly encouraged by the styles).
    * Ensures sufficient color contrast (especially important for the dark theme).
* **User Experience:**
    * Button hover effects provide visual feedback.
    *  `box-sizing: border-box` is used consistently to prevent layout issues when adding padding and borders.
    * `overflow: hidden; white-space: nowrap;` is added to the calculator display to prevent text from overflowing the display.
* **Code Quality:**
    * Consistent naming conventions.
    * Proper indentation and spacing.
* **Tabs:** Added CSS to format the tabs to display the calculator features.
* **`flex: 1;` on `.container`:** This is *crucial* to make the container (and its contents) fill the available vertical space, especially when the content is shorter than the viewport height.  Without this, the footer would float too high on pages with little content.
* **Feature Toggling:**  The scientific calculator section is initially hidden and toggled with a button.
* **Primary/Secondary Colors:**  Uses a primary color (#3498db) and secondary colors (green, red, purple, etc.) to provide visual consistency.
* **`box-sizing: border-box;`**: This is important to prevent the padding and border from increasing the total width of the input/select elements.

How to use this CSS:

1.  **Save:** Save the code above as a `.css` file (e.g., `style.css`).
2.  **Link:** In your HTML file, link the stylesheet within the `<head>` section:

```html
<!DOCTYPE html>
<html>
<head>
  <title>Calculator</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <!-- Your calculator HTML content here -->
</body>
</html>
```

**Important HTML Structure (Example):**

The HTML is also crucial for this CSS to work correctly.  Here's an example of how the HTML might be structured, incorporating the tabbed interface:

```html
<!DOCTYPE html>
<html>
<head>
  <title>Calculator</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <h1>Calculator</h1>

    <div class="tabs">
      <button class="tab-button active" data-tab="basic">Basic</button>
      <button class="tab-button" data-tab="scientific">Scientific</button>
      <button class="tab-button" data-tab="currency">Currency</button>
      <button class="tab-button" data-tab="unit">Unit Converter</button>
      <button class="tab-button" data-tab="trigonometry">Trigonometry</button>
    </div>

    <div id="basic" class="tab-content active">
      <h2>Basic Calculator</h2>
      <div id="calculator">
        <div id="display">0</div>
        <button class="clear">C</button>
        <button>/</button>
        <button>*</button>
        <button>-</button>
        <button>7</button>
        <button>8</button>
        <button>9</button>
        <button>+</button>
        <button>4</button>
        <button>5</button>
        <button>6</button>
        <button>1</button>
        <button>2</button>
        <button>3</button>
        <button>0</button>
        <button>.</button>
        <button class="equal">=</button>
      </div>
    </div>

    <div id="scientific" class="tab-content">
        <h2>Scientific Calculator</h2>
        <div id="scientific-functions">
            <button>sin</button>
            <button>cos</button>
            <button>tan</button>
            <button>log</button>
            <button>ln</button>
            <button>sqrt</button>
            <button>^</button>
            <button>!</button>
            <button>pi</button>
            <button>e</button>
        </div>
    </div>

    <div id="currency" class="tab-content">
      <h2>Currency Converter</h2>
      <div id="currency-converter">
        <label for="from-currency">From:</label>
        <select id="from-currency">
          <option value="USD">USD</option>
          <option value="EUR">EUR</option>
          <option value="GBP">GBP</option>
        </select>
        <label for="amount">Amount:</label>
        <input type="number" id="amount" value="1">
        <label for="to-currency">To:</label>
        <select id="to-currency">
          <option value="USD">USD</option>
          <option value="EUR">EUR</option>
          <option value="GBP">GBP</option>
        </select>
        <button id="convert-currency">Convert</button>
        <div id="conversion-result"></div>
      </div>
    </div>

    <div id="unit" class="tab-content">
      <h2>Unit Converter</h2>
      <div id="unit-converter">
        <label for="from-unit-type">From Type:</label>
        <select id="from-unit-type">
          <option value="length">Length</option>
          <option value="weight">Weight</option>
        </select>

        <label for="from-unit">From Unit:</label>
        <select id="from-unit">
          <option value="meters">Meters</option>
          <option value="feet">Feet</option>
        </select>

        <label for="unit-amount">Amount:</label>
        <input type="number" id="unit-amount" value="1">

        <label for="to-unit">To Unit:</label>
        <select id="to-unit">
          <option value="meters">Meters</option>
          <option value="feet">Feet</option>
        </select>

        <button id="convert-unit">Convert</button>
        <div id="conversion-result"></div>
      </div>
    </div>

    <div id="trigonometry" class="tab-content">
        <h2>Trigonometry</h2>
        <div id="trigonometry-functions">
            <label for="trig-input">Angle (in degrees):</label>
            <input type="number" id="trig-input" value="0">
            <label for="trig-function">Function:</label>
            <select id="trig-function">
                <option value="sin">Sine</option>
                <option value="cos">Cosine</option>
                <option value="tan">Tangent</option>
            </select>
            <button id="calculate-trig">Calculate</button>
            <div id="trigonometry-result"></div>
        </div>
    </div>
  </div>

  <footer>
    <p>&copy; 2023 Calculator App</p>
  </footer>

  <script>
    // JavaScript to handle tab switching
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Deactivate all tabs and content
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));

        // Activate the clicked tab and its content
        button.classList.add('active');
        const tabId = button.dataset.tab;
        document.getElementById(tabId).classList.add('active');
      });
    });
  </script>
</body>
</html>
```

**Key Points for the HTML:**

*   **Tab Buttons:**  Each `<button class="tab-button">` needs a `data-tab` attribute that corresponds to the `id` of the tab content it should show.
*   **Tab Content:** Each content area (`<div class="tab-content">`) has an `id` that matches the `data-tab` of a button.

3.  **JavaScript (for Tabs):** The example HTML includes JavaScript to handle switching between the calculator features using tabs.  You'll need to add JavaScript to make the calculators themselves functional.

This is a comprehensive starting point. Remember you'll need JavaScript to handle the logic of each calculator function.  The provided CSS will give you a clean and functional layout.
